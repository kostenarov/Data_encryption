def encode(message, src=r"C:\Users\petoc\PycharmProjects\Data_encryption\demo\mountainLake.png"):
    # open image and convert from rgb to rgba and get size
    img = Image.open(src)
    img = img.convert("RGBA")
    width, height = img.size
    # convert to array of pixels and get how many there are
    array = np.array(list(img.getdata()))
    mode = 4
    pixels = array.size // mode
    if len(message) > pixels / 2:
        raise ValueError("Message is too long for the image")
    # make a delimeter to know when to stop decoding, convert the message
    # to binary and calculate how many pixels you need
    message += '\0'
    binary_message = ''.join([format(ord(i), "08b") for i in message])
    required_pixels = len(binary_message)
    index = 0
    for p in range(pixels):
        for q in range(0, 4):
            if index < required_pixels:
                array[p][q] = int(bin(array[p][q])[2:9] + binary_message[index], 2)
                index += 1
            else:
                break
    array = array.reshape(height, width, mode)
    enc_img = Image.fromarray(array.astype('uint8'), img.mode)
    enc_img.save(r"C:\Users\petoc\PycharmProjects\Data_encryption\demo\test.png")


def decode(src=r"C:\Users\petoc\PycharmProjects\Data_encryption\demo\test.png"):
    img = Image.open(src, 'r')
    array = np.array(list(img.getdata()))
    mode = 4
    pixels = array.size // mode
    hidden_bits = ""
    second = False
    for p in range(pixels):
        for q in range(0, 4):
            hidden_bits += (bin(array[p][q])[2:][-1])
        if not second:
            second = True
        elif second:
            second = False
            hidden_char = chr(int(hidden_bits[-8:]))
            if hidden_char == '\0':
                break

    hidden_bits = [hidden_bits[i:i + 8] for i in range(0, len(hidden_bits), 8)]

    message = ""
    for i in range(len(hidden_bits)):
        if message[-1:] == '\0':
            break
        else:
            message += chr(int(hidden_bits[i], 2))
    if '\0' in message:
        print("Hidden Message:", message[:-1])
        return message[:-1]
    else:
        print("No Hidden Message Found")




    img = Image.open(src)
    encoded_image = lsb.hide(img, message)
    encoded_image.save(r"C:\Users\petoc\PycharmProjects\Data_encryption\demo\test.png")



        # Decode the message from the image
    decoded_message = lsb.reveal(src)
    return decoded_message


    # calculate the maximum bytes to encode
    image = cv2.imread(src)
    n_bytes = image.shape[0] * image.shape[1] * 3 // 8
    print("Maximum bytes to encode:", n_bytes)

    # Check if the number of bytes to encode is less than the maximum bytes in the image
    if len(message) > n_bytes:
        raise ValueError("Error encountered insufficient bytes, need bigger image or less data !!")

    message += "#####"  # you can use any string as the delimeter

    data_index = 0
    # convert input data to binary format using messageToBinary() fucntion
    binary_secret_msg = messageToBinary(message)

    data_len = len(binary_secret_msg)  # Find the length of data that needs to be hidden

    for values in image:
        for pixel in values:
            # convert RGB values to binary format
            r, g, b = messageToBinary(pixel)
            # modify the least significant bit only if there is still data to store
            if data_index < data_len:
                # hide the data into least significant bit of red pixel
                pixel[0] = int(r[:-1] + binary_secret_msg[data_index], 2)
                data_index += 1
            if data_index < data_len:
                # hide the data into least significant bit of green pixel
                pixel[1] = int(g[:-1] + binary_secret_msg[data_index], 2)
                data_index += 1
            if data_index < data_len:
                # hide the data into least significant bit of  blue pixel
                pixel[2] = int(b[:-1] + binary_secret_msg[data_index], 2)
                data_index += 1
            # if data is encoded, just break out of the loop
            if data_index >= data_len:
                break
    cv2.imwrite(r"demo/output/encoded.png", image)


    binary_data = ""
    image = cv2.imread(src)
    for values in image:
        for pixel in values:
            r, g, b = messageToBinary(pixel)  # convert the red,green and blue values into binary format
            binary_data += r[-1]  # extracting data from the least significant bit of red pixel
            binary_data += g[-1]  # extracting data from the least significant bit of red pixel
            binary_data += b[-1]  # extracting data from the least significant bit of red pixel
    # split by 8-bits
    all_bytes = [binary_data[i: i + 8] for i in range(0, len(binary_data), 8)]
    # convert from bits to characters
    decoded_data = ""
    for byte in all_bytes:
        decoded_data += chr(int(byte, 2))
        if decoded_data[-5:] == "#####":  # check if we have reached the delimeter which is "#####"
            break
    # print(decoded_data)
    return decoded_data[:-5]  # remove the delimeter to show the original hidden message


